// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParcelLocker.Models;

namespace ParcelLocker.Migrations
{
    [DbContext(typeof(ParcelLockerContext))]
    partial class ParcelLockerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("ComplaintComplaintReason", b =>
                {
                    b.Property<int>("ComplaintsId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonsId")
                        .HasColumnType("int");

                    b.HasKey("ComplaintsId", "ReasonsId");

                    b.HasIndex("ReasonsId");

                    b.ToTable("ComplaintComplaintReason");
                });

            modelBuilder.Entity("ParcelLocker.Models.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ParcelNumber")
                        .IsRequired()
                        .HasColumnType("varchar(767)")
                        .HasColumnName("parcel_number");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("ParcelNumber");

                    b.ToTable("complaints");
                });

            modelBuilder.Entity("ParcelLocker.Models.Entities.ComplaintReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("complaint_reasons");
                });

            modelBuilder.Entity("ParcelLocker.Models.Entities.Locker", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(767)")
                        .HasColumnName("code");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("Code");

                    b.ToTable("lockers");
                });

            modelBuilder.Entity("ParcelLocker.Models.Entities.Parcel", b =>
                {
                    b.Property<string>("ParcelNumber")
                        .HasColumnType("varchar(767)")
                        .HasColumnName("parcel_number");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("LockerCode")
                        .IsRequired()
                        .HasColumnType("varchar(767)")
                        .HasColumnName("locker");

                    b.Property<string>("PickupCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pickup_code");

                    b.Property<string>("ReceiverEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_email");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_phone");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_email");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("ParcelNumber");

                    b.HasIndex("LockerCode");

                    b.ToTable("parcels");
                });

            modelBuilder.Entity("ComplaintComplaintReason", b =>
                {
                    b.HasOne("ParcelLocker.Models.Entities.Complaint", null)
                        .WithMany()
                        .HasForeignKey("ComplaintsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelLocker.Models.Entities.ComplaintReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelLocker.Models.Entities.Complaint", b =>
                {
                    b.HasOne("ParcelLocker.Models.Entities.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("ParcelLocker.Models.Entities.Parcel", b =>
                {
                    b.HasOne("ParcelLocker.Models.Entities.Locker", "Locker")
                        .WithMany("Parcels")
                        .HasForeignKey("LockerCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locker");
                });

            modelBuilder.Entity("ParcelLocker.Models.Entities.Locker", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
